syntax = "proto3";
package bg.v1;

option go_package = "bg/v1;bgv1";

// Core enums
enum Side  { SIDE_UNSPECIFIED = 0; WHITE = 1; BLACK = 2; NONE = 3; }
enum Phase { PHASE_UNSPECIFIED = 0; OPENING_ROLL = 1; AWAITING_ROLL = 2; MOVING = 3; CUBE_OFFERED = 4; }

message Point { Side side = 1; uint32 count = 2; }

message BoardState {
  repeated Point points = 1;    // len 24
  uint32 white_bar  = 2;
  uint32 black_bar  = 3;
  uint32 white_off  = 4;
  uint32 black_off  = 5;
  uint32 cube_value = 6;        // 1,2,4,...
  Side   cube_holder = 7;       // NONE=centered
  Phase  phase = 8;
  Side   side_to_move = 9;
  repeated uint32 dice_remaining = 10; // e.g., [6,3] or [5,5,5,5]
}

message Header {
  uint32 proto_version   = 1;
  string match_id        = 2;
  uint64 client_seq      = 3;
  uint64 last_seen_version = 4;
  uint64 server_version  = 5;
  string user_id         = 6;   // dev-only until JWT
}

// Commands
message CreateMatch { string mode = 1; optional uint32 points_target = 2; }
message JoinMatch   { string match_id = 1; enum Role { ROLE_UNSPECIFIED=0; PLAYER=1; WATCHER=2; } Role role = 2; }

message OfferCube {}
message TakeCube {}
message DropCube {}
message RollDice {}
message SetDice { uint32 d1 = 1; uint32 d2 = 2; }
message ApplyStep { int32 from = 1; int32 pip = 2; }
message UndoStep {}
message CommitTurn {}
message RequestSnapshot {}

message Command {
  oneof kind {
    CreateMatch     create_match   = 1;
    JoinMatch       join_match     = 2;
    OfferCube       offer_cube     = 3;
    TakeCube        take_cube      = 4;
    DropCube        drop_cube      = 5;
    RollDice        roll_dice      = 6;
    SetDice         set_dice       = 7;
    ApplyStep       apply_step     = 8;
    UndoStep        undo_step      = 9;
    CommitTurn      commit_turn    = 10;
    RequestSnapshot request_snapshot = 11;
  }
}

// Events
message Snapshot { BoardState state = 1; uint64 version = 2; }
message DiceSet    { repeated uint32 dice = 1; Side actor = 2; }
message StepApplied{ int32 from = 1; int32 to = 2; int32 pip = 3; Side actor = 4; bool hit = 5; bool borne_off = 6; }
message StepUndone {}
message TurnCommitted { Side next_to_move = 1; }
message CubeOffered { Side from = 1; uint32 cube_value = 2; }
message CubeTaken   { Side holder = 1; uint32 cube_value = 2; }
message CubeDropped { Side winner = 1; uint32 final_cube = 2; }
message GameOver {
  Side winner = 1; uint32 final_cube = 2;
  enum WinType { WIN_UNSPECIFIED=0; SINGLE=1; GAMMON=2; BACKGAMMON=3; RESIGN=4; }
  WinType type = 3;
}
message Error { uint32 code = 1; string message = 2; }

message Event {
  oneof kind {
    Snapshot       snapshot       = 1;
    DiceSet        dice_set       = 2;
    StepApplied    step_applied   = 3;
    StepUndone     step_undone    = 4;
    TurnCommitted  turn_committed = 5;
    CubeOffered    cube_offered   = 6;
    CubeTaken      cube_taken     = 7;
    CubeDropped    cube_dropped   = 8;
    GameOver       game_over      = 9;
    Error          error          = 10;
  }
}

message Envelope {
  Header header = 1;
  oneof body { Command cmd = 2; Event evt = 3; }
}

// Services
message LoginReq  { string username = 1; string password = 2; }
message LoginResp { string user_id = 1; string token = 2; }

service AuthService { rpc Login(LoginReq) returns (LoginResp); }
service MatchService { rpc Stream (stream Envelope) returns (stream Envelope); }
